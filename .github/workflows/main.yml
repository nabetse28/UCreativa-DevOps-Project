name: CI/CD

on:
  # push:
  #   branches: [ dev ]
  # pull_request:
  #   branches: [ master, dev ]
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  WORKSPACE: ${{ github.workspace }}
  RUN_ID: ${{ github.run_id }}
  BRANCH: ${{ github.ref_name }}
  REPO: ${{ github.repository }}
  COMMIT: ${{ github.sha }}

jobs:
  test:
    name: Test & Secure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Python set up
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Node.js set up
        run: |
          cd frontend
          npm install --legacy-peer-deps
          cd ..

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest

      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Backend test
        run: |
          cd backend
          pytest .
          cd ..
      - name: Frontend test
        run: |
          cd frontend
          npm run test
          cd ..
      - name: Sonarcloud scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Github Short SHA & TIMESTAMP
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "TIMESTAMP=`date -u +%Y%m%d%H%M%S`" >> $GITHUB_ENV

      - name: Login to Dockerhub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        env:
          BACKEND: '${{env.DOCKER_USERNAME}}/backend'
          FRONTEND: '${{env.DOCKER_USERNAME}}/frontend'
          BUILD_TAG: ${{env.RUN_ID}}-${{env.BRANCH}}-${{env.SHORT_SHA}}-${{env.TIMESTAMP}}
        run: |
          docker build -t '${{env.BACKEND}}:${{env.BUILD_TAG}}' -t '${{env.BACKEND}}:latest' ./backend
          docker build -t '${{env.FRONTEND}}:${{env.BUILD_TAG}}' -t '${{env.FRONTEND}}:latest' ./frontend

      - name: Scan Backend Docker image
        uses: anchore/scan-action@v3
        id: scan_backend
        env:
          BACKEND: '${{env.DOCKER_USERNAME}}/backend'
        with:
          image: '${{env.BACKEND}}:latest'
          acs-report-enable: true
          fail-build: false
          severity-cutoff: critical

      - name: Scan Frontend Docker image
        uses: anchore/scan-action@v3
        env:
          FRONTEND: '${{env.DOCKER_USERNAME}}/frontend'
        with:
          image: '${{env.FRONTEND}}:latest'
          acs-report-enable: true
          fail-build: false

      - name: Push Docker images
        env:
          BACKEND: '${{env.DOCKER_USERNAME}}/backend'
          FRONTEND: '${{env.DOCKER_USERNAME}}/frontend'
          BUILD_TAG: ${{env.RUN_ID}}-${{env.BRANCH}}-${{env.SHORT_SHA}}-${{env.TIMESTAMP}}
        run: |
          docker push '${{env.BACKEND}}:${{env.BUILD_TAG}}'
          docker push '${{env.BACKEND}}:latest'
          docker push '${{env.FRONTEND}}:${{env.BUILD_TAG}}'
          docker push '${{env.FRONTEND}}:latest'

  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    needs: [test, build]

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.3'
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-east-1

      - name: Update kube config
        run: aws eks update-kubeconfig --name simple-bank --region eu-east-1

      - name: Deploy image to Amazon EKS
        run: |
          kubectl apply -f eks/aws-auth.yaml
          kubectl apply -f eks/deployment.yaml
          kubectl apply -f eks/service.yaml
          kubectl apply -f eks/issuer.yaml
          kubectl apply -f eks/ingress.yaml
